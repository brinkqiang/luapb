// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: comm.proto

#ifndef PROTOBUF_INCLUDED_comm_2eproto
#define PROTOBUF_INCLUDED_comm_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_comm_2eproto 

namespace protobuf_comm_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_comm_2eproto
namespace protocol {
class comm_message;
class comm_messageDefaultTypeInternal;
extern comm_messageDefaultTypeInternal _comm_message_default_instance_;
}  // namespace protocol
namespace google {
namespace protobuf {
template<> ::protocol::comm_message* Arena::CreateMaybeMessage<::protocol::comm_message>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace protocol {

// ===================================================================

class comm_message : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.comm_message) */ {
 public:
  comm_message();
  virtual ~comm_message();

  comm_message(const comm_message& from);

  inline comm_message& operator=(const comm_message& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  comm_message(comm_message&& from) noexcept
    : comm_message() {
    *this = ::std::move(from);
  }

  inline comm_message& operator=(comm_message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const comm_message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const comm_message* internal_default_instance() {
    return reinterpret_cast<const comm_message*>(
               &_comm_message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(comm_message* other);
  friend void swap(comm_message& a, comm_message& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline comm_message* New() const final {
    return CreateMaybeMessage<comm_message>(NULL);
  }

  comm_message* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<comm_message>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const comm_message& from);
  void MergeFrom(const comm_message& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(comm_message* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string traceId = 5;
  void clear_traceid();
  static const int kTraceIdFieldNumber = 5;
  const ::std::string& traceid() const;
  void set_traceid(const ::std::string& value);
  #if LANG_CXX11
  void set_traceid(::std::string&& value);
  #endif
  void set_traceid(const char* value);
  void set_traceid(const char* value, size_t size);
  ::std::string* mutable_traceid();
  ::std::string* release_traceid();
  void set_allocated_traceid(::std::string* traceid);

  // string service = 11;
  void clear_service();
  static const int kServiceFieldNumber = 11;
  const ::std::string& service() const;
  void set_service(const ::std::string& value);
  #if LANG_CXX11
  void set_service(::std::string&& value);
  #endif
  void set_service(const char* value);
  void set_service(const char* value, size_t size);
  ::std::string* mutable_service();
  ::std::string* release_service();
  void set_allocated_service(::std::string* service);

  // string message = 12;
  void clear_message();
  static const int kMessageFieldNumber = 12;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // bytes data = 13;
  void clear_data();
  static const int kDataFieldNumber = 13;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // uint32 msgType = 1;
  void clear_msgtype();
  static const int kMsgTypeFieldNumber = 1;
  ::google::protobuf::uint32 msgtype() const;
  void set_msgtype(::google::protobuf::uint32 value);

  // uint32 sequence = 2;
  void clear_sequence();
  static const int kSequenceFieldNumber = 2;
  ::google::protobuf::uint32 sequence() const;
  void set_sequence(::google::protobuf::uint32 value);

  // uint64 session = 4;
  void clear_session();
  static const int kSessionFieldNumber = 4;
  ::google::protobuf::uint64 session() const;
  void set_session(::google::protobuf::uint64 value);

  // sint32 code = 3;
  void clear_code();
  static const int kCodeFieldNumber = 3;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protocol.comm_message)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr traceid_;
  ::google::protobuf::internal::ArenaStringPtr service_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::uint32 msgtype_;
  ::google::protobuf::uint32 sequence_;
  ::google::protobuf::uint64 session_;
  ::google::protobuf::int32 code_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_comm_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// comm_message

// uint32 msgType = 1;
inline void comm_message::clear_msgtype() {
  msgtype_ = 0u;
}
inline ::google::protobuf::uint32 comm_message::msgtype() const {
  // @@protoc_insertion_point(field_get:protocol.comm_message.msgType)
  return msgtype_;
}
inline void comm_message::set_msgtype(::google::protobuf::uint32 value) {
  
  msgtype_ = value;
  // @@protoc_insertion_point(field_set:protocol.comm_message.msgType)
}

// uint32 sequence = 2;
inline void comm_message::clear_sequence() {
  sequence_ = 0u;
}
inline ::google::protobuf::uint32 comm_message::sequence() const {
  // @@protoc_insertion_point(field_get:protocol.comm_message.sequence)
  return sequence_;
}
inline void comm_message::set_sequence(::google::protobuf::uint32 value) {
  
  sequence_ = value;
  // @@protoc_insertion_point(field_set:protocol.comm_message.sequence)
}

// sint32 code = 3;
inline void comm_message::clear_code() {
  code_ = 0;
}
inline ::google::protobuf::int32 comm_message::code() const {
  // @@protoc_insertion_point(field_get:protocol.comm_message.code)
  return code_;
}
inline void comm_message::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:protocol.comm_message.code)
}

// uint64 session = 4;
inline void comm_message::clear_session() {
  session_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 comm_message::session() const {
  // @@protoc_insertion_point(field_get:protocol.comm_message.session)
  return session_;
}
inline void comm_message::set_session(::google::protobuf::uint64 value) {
  
  session_ = value;
  // @@protoc_insertion_point(field_set:protocol.comm_message.session)
}

// string traceId = 5;
inline void comm_message::clear_traceid() {
  traceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& comm_message::traceid() const {
  // @@protoc_insertion_point(field_get:protocol.comm_message.traceId)
  return traceid_.GetNoArena();
}
inline void comm_message::set_traceid(const ::std::string& value) {
  
  traceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.comm_message.traceId)
}
#if LANG_CXX11
inline void comm_message::set_traceid(::std::string&& value) {
  
  traceid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.comm_message.traceId)
}
#endif
inline void comm_message::set_traceid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  traceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.comm_message.traceId)
}
inline void comm_message::set_traceid(const char* value, size_t size) {
  
  traceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.comm_message.traceId)
}
inline ::std::string* comm_message::mutable_traceid() {
  
  // @@protoc_insertion_point(field_mutable:protocol.comm_message.traceId)
  return traceid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* comm_message::release_traceid() {
  // @@protoc_insertion_point(field_release:protocol.comm_message.traceId)
  
  return traceid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void comm_message::set_allocated_traceid(::std::string* traceid) {
  if (traceid != NULL) {
    
  } else {
    
  }
  traceid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), traceid);
  // @@protoc_insertion_point(field_set_allocated:protocol.comm_message.traceId)
}

// string service = 11;
inline void comm_message::clear_service() {
  service_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& comm_message::service() const {
  // @@protoc_insertion_point(field_get:protocol.comm_message.service)
  return service_.GetNoArena();
}
inline void comm_message::set_service(const ::std::string& value) {
  
  service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.comm_message.service)
}
#if LANG_CXX11
inline void comm_message::set_service(::std::string&& value) {
  
  service_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.comm_message.service)
}
#endif
inline void comm_message::set_service(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.comm_message.service)
}
inline void comm_message::set_service(const char* value, size_t size) {
  
  service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.comm_message.service)
}
inline ::std::string* comm_message::mutable_service() {
  
  // @@protoc_insertion_point(field_mutable:protocol.comm_message.service)
  return service_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* comm_message::release_service() {
  // @@protoc_insertion_point(field_release:protocol.comm_message.service)
  
  return service_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void comm_message::set_allocated_service(::std::string* service) {
  if (service != NULL) {
    
  } else {
    
  }
  service_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service);
  // @@protoc_insertion_point(field_set_allocated:protocol.comm_message.service)
}

// string message = 12;
inline void comm_message::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& comm_message::message() const {
  // @@protoc_insertion_point(field_get:protocol.comm_message.message)
  return message_.GetNoArena();
}
inline void comm_message::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.comm_message.message)
}
#if LANG_CXX11
inline void comm_message::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.comm_message.message)
}
#endif
inline void comm_message::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.comm_message.message)
}
inline void comm_message::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.comm_message.message)
}
inline ::std::string* comm_message::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:protocol.comm_message.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* comm_message::release_message() {
  // @@protoc_insertion_point(field_release:protocol.comm_message.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void comm_message::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:protocol.comm_message.message)
}

// bytes data = 13;
inline void comm_message::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& comm_message::data() const {
  // @@protoc_insertion_point(field_get:protocol.comm_message.data)
  return data_.GetNoArena();
}
inline void comm_message::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.comm_message.data)
}
#if LANG_CXX11
inline void comm_message::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.comm_message.data)
}
#endif
inline void comm_message::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.comm_message.data)
}
inline void comm_message::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.comm_message.data)
}
inline ::std::string* comm_message::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:protocol.comm_message.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* comm_message::release_data() {
  // @@protoc_insertion_point(field_release:protocol.comm_message.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void comm_message::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:protocol.comm_message.data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_comm_2eproto
