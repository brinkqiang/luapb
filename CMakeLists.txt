cmake_minimum_required(VERSION 3.2)

PROJECT(luapb)
INCLUDE(cmake/ModuleImport.cmake)
LIST(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake)

IF (WIN32)
    MESSAGE(STATUS "Now is windows")

    SET(DMOS_NAME "win")

    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /Zi /nologo /Gm- /W3 /WX /EHsc /GS /fp:precise /Zc:wchar_t /Zc:forScope /Zc:inline /Gd /TP")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /FC /wd4996")

    SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /MTd")
    SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /MT")
    SET(CMAKE_CXX_FLAGS_MINSIZEREL "${CMAKE_CXX_FLAGS_MINSIZEREL} /MT")
    SET(CMAKE_CXX_FLAGS_RELWITHDEBINFO "${CMAKE_CXX_FLAGS_RELWITHDEBINFO} /MT")

    SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} /DEBUG /OPT:REF /OPT:NOICF /INCREMENTAL:NO /STACK:16777216")

    SET(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} /DEBUG /OPT:REF /OPT:NOICF /INCREMENTAL:NO")

    IF(MSVC)
        ADD_DEFINITIONS(/bigobj)
        ADD_COMPILE_OPTIONS(/W3 /wd4005 /wd4068 /wd4244 /wd4267 /wd4800)
        ADD_DEFINITIONS(/DNOMINMAX /DWIN32_LEAN_AND_MEAN=1 /D_CRT_SECURE_NO_WARNINGS /D_SCL_SECURE_NO_WARNINGS)
        IF (MSVC_VERSION GREATER_EQUAL 1900)
            INCLUDE(CheckCXXCompilerFlag)
            CHECK_CXX_COMPILER_FLAG("/std:c++latest" _cpp_latest_flag_supported)
            IF (_cpp_latest_flag_supported)
                ADD_COMPILE_OPTIONS("/std:c++latest")
            ENDIF()
    	ENDIF()
    ENDIF()
ELSEIF (APPLE)
    MESSAGE(STATUS "Now is Apple systems")

    SET(DMOS_NAME "mac") 
    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -pthread -fPIC" )
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -pthread -fPIC" )

    SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -Og -g -D_DEBUG")
    SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -O3 -g")
    SET(CMAKE_CXX_FLAGS_MINSIZEREL "${CMAKE_CXX_FLAGS_MINSIZEREL} -O3 -g")
    SET(CMAKE_CXX_FLAGS_RELWITHDEBINFO "${CMAKE_CXX_FLAGS_RELWITHDEBINFO} -O3 -g")
    SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -Wl" )
ELSEIF (UNIX)
    MESSAGE(STATUS "Now is UNIX-like OS")
 
    SET(DMOS_NAME "lin")

    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -pthread -fPIC -lrt -ldl -lm" )
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -pthread -fPIC -lrt -ldl -lm" )

    SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -Og -g -D_DEBUG")
    SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -O3 -g")
    SET(CMAKE_CXX_FLAGS_MINSIZEREL "${CMAKE_CXX_FLAGS_MINSIZEREL} -O3 -g")
    SET(CMAKE_CXX_FLAGS_RELWITHDEBINFO "${CMAKE_CXX_FLAGS_RELWITHDEBINFO} -O3 -g")

    SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS}")
    
    FIND_PROGRAM(CCACHE_FOUND ccache)
    IF(CCACHE_FOUND)
        SET_PROPERTY(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ccache)
        SET_PROPERTY(GLOBAL PROPERTY RULE_LAUNCH_LINK ccache)
    ENDIF(CCACHE_FOUND)
ENDIF ()

SET(LUAPB_VERSION_MAJOR "1")
SET(LUAPB_VERSION_MINOR "0")
SET(LUAPB_VERSION_PATCH "1")
SET(LUAPB_VERSION "${LUAPB_VERSION_MAJOR}.${LUAPB_VERSION_MINOR}.${LUAPB_VERSION_PATCH}")

MESSAGE(STATUS "VERSION: ${LUAPB_VERSION}")

ADD_DEFINITIONS(-DUSE_LUAPB)
ADD_DEFINITIONS(-DLUA_COMPAT_MODULE)

ModuleImport("dmprotobuf" "thirdparty/dmprotobuf")

IF (WIN32)
    INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/src/windows)
ENDIF(WIN32)

INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/)
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/include)
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/src)
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/src/lua)
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/test)

LINK_DIRECTORIES(${CMAKE_SOURCE_DIR}/bin)

SET(EXECUTABLE_OUTPUT_PATH ${CMAKE_SOURCE_DIR}/bin)
SET(LIBRARY_OUTPUT_PATH ${CMAKE_SOURCE_DIR}/bin)

FILE(GLOB DMLUA_SOURCES
${CMAKE_CURRENT_SOURCE_DIR}/src/lua/*.cpp
${CMAKE_CURRENT_SOURCE_DIR}/src/lua/*.cc
${CMAKE_CURRENT_SOURCE_DIR}/src/lua/*.c
${CMAKE_CURRENT_SOURCE_DIR}/src/lua/*.hpp
${CMAKE_CURRENT_SOURCE_DIR}/src/lua/*.h
)

LIST(FILTER DMLUA_SOURCES EXCLUDE REGEX "lua.c$")
LIST(FILTER DMLUA_SOURCES EXCLUDE REGEX "luac.c$")
LIST(FILTER DMLUA_SOURCES EXCLUDE REGEX "wmain.c$")

FILE(GLOB LUA_SOURCES
${CMAKE_CURRENT_SOURCE_DIR}/src/lua/lua.c
)

FILE(GLOB LUAPB_SOURCES
${CMAKE_CURRENT_SOURCE_DIR}/include/*.hpp
${CMAKE_CURRENT_SOURCE_DIR}/include/*.h

${CMAKE_CURRENT_SOURCE_DIR}/src/luapb/*.cpp
${CMAKE_CURRENT_SOURCE_DIR}/src/luapb/*.cc
${CMAKE_CURRENT_SOURCE_DIR}/src/luapb/*.c
${CMAKE_CURRENT_SOURCE_DIR}/src/luapb/*.hpp
${CMAKE_CURRENT_SOURCE_DIR}/src/luapb/*.h
)

IF (WIN32)
    LIST(APPEND LUAPB_SOURCES)
ENDIF(WIN32)

FILE(GLOB_RECURSE LUAPBTEST_SOURCES
${CMAKE_CURRENT_SOURCE_DIR}/test/*.cpp
${CMAKE_CURRENT_SOURCE_DIR}/test/*.cc
${CMAKE_CURRENT_SOURCE_DIR}/test/*.c
${CMAKE_CURRENT_SOURCE_DIR}/test/*.hpp
${CMAKE_CURRENT_SOURCE_DIR}/test/*.h)

IF (WIN32)
    ADD_LIBRARY(lua53 SHARED ${DMLUA_SOURCES})
    ADD_LIBRARY(luapb SHARED ${LUAPB_SOURCES} ${CMAKE_CURRENT_SOURCE_DIR}/src/luapb/luapb_module.def)

    TARGET_LINK_LIBRARIES(luapb lua53 libprotobuf libprotoc)

    ADD_EXECUTABLE(lua ${LUA_SOURCES})
    TARGET_LINK_LIBRARIES(lua lua53)
    
    ADD_EXECUTABLE(luapbtest ${LUAPBTEST_SOURCES})
    TARGET_LINK_LIBRARIES(luapbtest luapb lua53 libprotobuf libprotoc)
    
    SET_TARGET_PROPERTIES(lua53 PROPERTIES COMPILE_FLAGS "-DLUA_BUILD_AS_DLL -DLUA_CORE")
    SET_TARGET_PROPERTIES(luapb PROPERTIES COMPILE_FLAGS "-DLUA_BUILD_AS_DLL -DLUA_LIB")
    SET_TARGET_PROPERTIES(luapbtest PROPERTIES COMPILE_FLAGS "-DLUA_BUILD_AS_DLL")
ELSEIF (APPLE)
    ADD_LIBRARY(lua53 SHARED ${DMLUA_SOURCES})
    ADD_LIBRARY(luapb SHARED ${LUAPB_SOURCES})

    TARGET_LINK_LIBRARIES(luapb lua53 libprotobuf libprotoc)

    ADD_EXECUTABLE(lua ${LUA_SOURCES})
    TARGET_LINK_LIBRARIES(lua lua53)

    ADD_EXECUTABLE(luapbtest ${LUAPBTEST_SOURCES})
    TARGET_LINK_LIBRARIES(luapbtest luapb lua53 libprotobuf libprotoc)


ELSEIF (UNIX)
    ADD_LIBRARY(lua53 SHARED ${DMLUA_SOURCES})
    ADD_LIBRARY(luapb SHARED ${LUAPB_SOURCES})

    TARGET_LINK_LIBRARIES(luapb lua53 libprotobuf libprotoc)

    ADD_EXECUTABLE(lua ${LUA_SOURCES})
    TARGET_LINK_LIBRARIES(lua lua53)

    ADD_EXECUTABLE(luapbtest ${LUAPBTEST_SOURCES})
    TARGET_LINK_LIBRARIES(luapbtest luapb lua53 libprotobuf libprotoc)

ENDIF ()

#ADD_CUSTOM_COMMAND(
#TARGET luapbtest
#PRE_BUILD
#COMMAND ${CMAKE_COMMAND} -E copy_if_different
#${CMAKE_CURRENT_SOURCE_DIR}/config/test.csv
#$<TARGET_FILE_DIR:luapbtest>
#)

#INSTALL(DIRECTORY include/ DESTINATION include)
#INSTALL(TARGETS luapb
#        RUNTIME DESTINATION bin
#        LIBRARY DESTINATION lib
#        ARCHIVE DESTINATION lib)

#SET(LUAPB_LIBS "luapb")
#MARK_AS_ADVANCED(${LUAPB_LIBS})
